// Mocks generated by Mockito 5.4.6 from annotations
// in easy_ssh_mob_new/test/widgets/session_log_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i10;

import 'package:easy_ssh_mob_new/models/execution_result.dart' as _i2;
import 'package:easy_ssh_mob_new/models/file_content.dart' as _i3;
import 'package:easy_ssh_mob_new/models/log_entry.dart' as _i8;
import 'package:easy_ssh_mob_new/models/ssh_connection_state.dart' as _i5;
import 'package:easy_ssh_mob_new/models/ssh_file.dart' as _i6;
import 'package:easy_ssh_mob_new/providers/ssh_provider.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExecutionResult_0 extends _i1.SmartFake
    implements _i2.ExecutionResult {
  _FakeExecutionResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileContent_1 extends _i1.SmartFake implements _i3.FileContent {
  _FakeFileContent_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SshProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSshProvider extends _i1.Mock implements _i4.SshProvider {
  MockSshProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.SshConnectionState get connectionState => (super.noSuchMethod(
        Invocation.getter(#connectionState),
        returnValue: _i5.SshConnectionState.disconnected,
      ) as _i5.SshConnectionState);

  @override
  List<_i6.SshFile> get currentFiles => (super.noSuchMethod(
        Invocation.getter(#currentFiles),
        returnValue: <_i6.SshFile>[],
      ) as List<_i6.SshFile>);

  @override
  String get currentPath => (super.noSuchMethod(
        Invocation.getter(#currentPath),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#currentPath),
        ),
      ) as String);

  @override
  List<String> get navigationHistory => (super.noSuchMethod(
        Invocation.getter(#navigationHistory),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get shouldPlayErrorSound => (super.noSuchMethod(
        Invocation.getter(#shouldPlayErrorSound),
        returnValue: false,
      ) as bool);

  @override
  List<_i8.LogEntry> get sessionLog => (super.noSuchMethod(
        Invocation.getter(#sessionLog),
        returnValue: <_i8.LogEntry>[],
      ) as List<_i8.LogEntry>);

  @override
  bool get loggingEnabled => (super.noSuchMethod(
        Invocation.getter(#loggingEnabled),
        returnValue: false,
      ) as bool);

  @override
  int get maxLogEntries => (super.noSuchMethod(
        Invocation.getter(#maxLogEntries),
        returnValue: 0,
      ) as int);

  @override
  bool get isConnecting => (super.noSuchMethod(
        Invocation.getter(#isConnecting),
        returnValue: false,
      ) as bool);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<bool> connect({
    required String? host,
    required int? port,
    required String? username,
    required String? password,
    bool? saveCredentials = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #host: host,
            #port: port,
            #username: username,
            #password: password,
            #saveCredentials: saveCredentials,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<void> listDirectory(String? path) => (super.noSuchMethod(
        Invocation.method(
          #listDirectory,
          [path],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> navigateToDirectory(String? path) => (super.noSuchMethod(
        Invocation.method(
          #navigateToDirectory,
          [path],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> navigateBack() => (super.noSuchMethod(
        Invocation.method(
          #navigateBack,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> navigateToParent() => (super.noSuchMethod(
        Invocation.method(
          #navigateToParent,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> navigateToHome() => (super.noSuchMethod(
        Invocation.method(
          #navigateToHome,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> refreshCurrentDirectory() => (super.noSuchMethod(
        Invocation.method(
          #refreshCurrentDirectory,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i2.ExecutionResult> executeFile(
    _i6.SshFile? file, {
    Duration? timeout = const Duration(seconds: 30),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeFile,
          [file],
          {#timeout: timeout},
        ),
        returnValue:
            _i9.Future<_i2.ExecutionResult>.value(_FakeExecutionResult_0(
          this,
          Invocation.method(
            #executeFile,
            [file],
            {#timeout: timeout},
          ),
        )),
      ) as _i9.Future<_i2.ExecutionResult>);

  @override
  _i9.Future<String?> executeCommand(String? command) => (super.noSuchMethod(
        Invocation.method(
          #executeCommand,
          [command],
        ),
        returnValue: _i9.Future<String?>.value(),
      ) as _i9.Future<String?>);

  @override
  void setErrorSoundEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setErrorSoundEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void testErrorSound() => super.noSuchMethod(
        Invocation.method(
          #testErrorSound,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<String?> executeCommandWithResult(String? command) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeCommandWithResult,
          [command],
        ),
        returnValue: _i9.Future<String?>.value(),
      ) as _i9.Future<String?>);

  @override
  _i9.Future<_i3.FileContent> readFile(_i6.SshFile? file) =>
      (super.noSuchMethod(
        Invocation.method(
          #readFile,
          [file],
        ),
        returnValue: _i9.Future<_i3.FileContent>.value(_FakeFileContent_1(
          this,
          Invocation.method(
            #readFile,
            [file],
          ),
        )),
      ) as _i9.Future<_i3.FileContent>);

  @override
  _i9.Future<_i3.FileContent> readFileWithMode(
    _i6.SshFile? file,
    _i3.FileViewMode? mode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readFileWithMode,
          [
            file,
            mode,
          ],
        ),
        returnValue: _i9.Future<_i3.FileContent>.value(_FakeFileContent_1(
          this,
          Invocation.method(
            #readFileWithMode,
            [
              file,
              mode,
            ],
          ),
        )),
      ) as _i9.Future<_i3.FileContent>);

  @override
  _i9.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> logout({bool? forgetCredentials = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
          {#forgetCredentials: forgetCredentials},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<bool> hasSavedCredentials() => (super.noSuchMethod(
        Invocation.method(
          #hasSavedCredentials,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<void> clearSavedCredentials() => (super.noSuchMethod(
        Invocation.method(
          #clearSavedCredentials,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  Map<String, dynamic> getSessionStats() => (super.noSuchMethod(
        Invocation.method(
          #getSessionStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  List<_i8.LogEntry> filterSessionLog({
    _i8.CommandType? type,
    _i8.CommandStatus? status,
    String? searchTerm,
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterSessionLog,
          [],
          {
            #type: type,
            #status: status,
            #searchTerm: searchTerm,
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: <_i8.LogEntry>[],
      ) as List<_i8.LogEntry>);

  @override
  void clearSessionLog() => super.noSuchMethod(
        Invocation.method(
          #clearSessionLog,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoggingEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setLoggingEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMaxLogEntries(int? max) => super.noSuchMethod(
        Invocation.method(
          #setMaxLogEntries,
          [max],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String exportSessionLog({
    required String? format,
    List<_i8.LogEntry>? entries,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportSessionLog,
          [],
          {
            #format: format,
            #entries: entries,
          },
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #exportSessionLog,
            [],
            {
              #format: format,
              #entries: entries,
            },
          ),
        ),
      ) as String);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
