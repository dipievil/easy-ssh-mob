// Mocks generated by Mockito 5.4.4 from annotations
// in easy_ssh_mob_new/test/widget/file_viewer_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:easy_ssh_mob_new/models/file_content.dart' as _i4;
import 'package:easy_ssh_mob_new/models/log_entry.dart' as _i6;
import 'package:easy_ssh_mob_new/models/ssh_connection_state.dart' as _i5;
import 'package:easy_ssh_mob_new/models/ssh_credentials.dart' as _i7;
import 'package:easy_ssh_mob_new/models/ssh_file.dart' as _i8;
import 'package:easy_ssh_mob_new/providers/ssh_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SshProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSshProvider extends _i1.Mock implements _i2.SshProvider {
  MockSshProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.SshConnectionState get connectionState => (super.noSuchMethod(
        Invocation.getter(#connectionState),
        returnValue: _i5.SshConnectionState.disconnected,
      ) as _i5.SshConnectionState);

  @override
  String? get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
      ) as String?);

  @override
  _i7.SSHCredentials? get currentCredentials => (super.noSuchMethod(
        Invocation.getter(#currentCredentials),
      ) as _i7.SSHCredentials?);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  bool get isConnecting => (super.noSuchMethod(
        Invocation.getter(#isConnecting),
        returnValue: false,
      ) as bool);

  @override
  List<_i6.LogEntry> get sessionLog => (super.noSuchMethod(
        Invocation.getter(#sessionLog),
        returnValue: <_i6.LogEntry>[],
      ) as List<_i6.LogEntry>);

  @override
  _i3.Future<_i4.FileContent> readFile(_i8.SshFile? file) => (super.noSuchMethod(
        Invocation.method(
          #readFile,
          [file],
        ),
        returnValue: _i3.Future<_i4.FileContent>.value(_FakeFileContent_0()),
      ) as _i3.Future<_i4.FileContent>);

  @override
  _i3.Future<bool> connect({
    required String? host,
    required int? port,
    required String? username,
    required String? password,
    bool? saveCredentials = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #host: host,
            #port: port,
            #username: username,
            #password: password,
            #saveCredentials: saveCredentials,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [FileContent].
class _FakeFileContent_0 extends _i1.SmartFake implements _i4.FileContent {
  _FakeFileContent_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}