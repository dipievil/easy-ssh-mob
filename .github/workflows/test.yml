name: Flutter Tests and Quality Checks

on:
  workflow_dispatch:
  label:
    types:
      - created
  pull_request:
    branches: [ main ]
  

jobs:
  # Análise estática e linting
  analyze:
    name: Code Analysis
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Check Flutter and Dart versions
        run: |
          flutter --version
          dart --version

      - name: Clean Flutter cache
        working-directory: ./src
        run: flutter clean

      - name: Get dependencies
        run: |
          cd src
          flutter pub get

      - name: Verify formatting
        run: |
          cd src
          dart format --output=none --set-exit-if-changed .

      - name: Analyze project source
        run: |
          cd src
          flutter analyze --fatal-infos

      - name: Check for outdated dependencies
        run: |
          cd src
          flutter pub outdated

  # Testes unitários e de widget
  test:
    name: Unit and Widget Tests
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get dependencies
        run: |
          cd src
          flutter pub get

      - name: Generate mocks
        run: |
          cd src
          flutter pub add build_runner
          flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Run unit tests
        run: |
          cd src
          flutter test --coverage --reporter=expanded

      - name: Run widget tests
        run: |
          cd src
          flutter test test/widget/ --reporter=expanded

      - name: Run service tests  
        run: |
          cd src
          flutter test test/services/ --reporter=expanded

      - name: Run model tests
        run: |
          cd src
          flutter test src/test/models/ --reporter=expanded

      - name: Run provider tests
        run: |
          cd src
          flutter test src/test/providers/ --reporter=expanded

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true

  # Testes de performance
  performance:
    name: Performance Tests
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get dependencies
        run: |
          cd src
          flutter pub get

      - name: Generate mocks
        run: |
          cd src
          flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Run performance tests
        run: |
          cd src
          flutter test test/performance/ --reporter=expanded

  # Testes de acessibilidade
  accessibility:
    name: Accessibility Tests
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get dependencies
        run: |
          cd src
          flutter pub get

      - name: Generate mocks
        run: |
          cd src
          flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Run accessibility tests
        run: |
          cd src
          flutter test test/accessibility/ --reporter=expanded

  # Build para Android
  build-android:
    name: Build Android APK
    runs-on: self-hosted
    needs: [analyze, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get dependencies
        run: |
          cd src
          flutter pub get

      - name: Build APK
        run: |
          cd src
          flutter build apk --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release.apk
          path: build/app/outputs/flutter-apk/app-release.apk

  # Build para iOS (apenas se estiver no macOS)
  build-ios:
    name: Build iOS App
    runs-on: self-hosted
    needs: [analyze, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get dependencies
        run: |
          cd src
          flutter pub get

      - name: Build iOS (no codesign)
        run: |
          cd src
          flutter build ios --release --no-codesign

  # Testes de integração (Android)
  integration-test-android:
    name: Integration Tests (Android)
    runs-on: self-hosted
    needs: [test]
    strategy:
      matrix:
        api-level: [29, 33]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get dependencies
        run: |
          cd src
          flutter pub get

      - name: Enable KVM group perms
        run: |
          cd src
           |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Run integration tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          profile: Nexus 6
          script: flutter test integration_test/app_test.dart

  # Testes de integração (iOS)
  integration-test-ios:
    name: Integration Tests (iOS)
    runs-on: self-hosted
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get dependencies
        run: |
          cd src
          flutter pub get

      - name: Start iOS Simulator
        run: |
          cd src
           |
          xcrun simctl boot "iPhone 14" || true
          xcrun simctl list devices

      - name: Run integration tests
        run: |
          cd src
          flutter test integration_test/app_test.dart -d "iPhone 14"

  # Relatório de cobertura
  coverage-report:
    name: Coverage Report
    runs-on: self-hosted
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get dependencies
        run: |
          cd src
          flutter pub get

      - name: Generate mocks
        run: |
          cd src
          flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Run all tests with coverage
        run: |
          cd src
          flutter test --coverage

      - name: Generate coverage HTML report
        run: |
          cd src
          mkdir -p coverage/html
          sudo apt-get update
          sudo apt-get install -y lcov
          genhtml coverage/lcov.info -o coverage/html

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/html/

  # Verificação de segurança
  security:
    name: Security Check
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get dependencies
        run: |
          cd src
           flutter pub get

      - name: Run security audit
        run: |
          cd src
          flutter pub deps --json | jq '.packages[] | select(.kind == "direct") | .name' | xargs -I {} echo "Checking {}"

      - name: Check for known vulnerabilities
        run: |
          cd src
          # Verificar se há dependências com vulnerabilidades conhecidas
          flutter pub deps --json > deps.json
          # Em um ambiente real, você usaria ferramentas como 'audit' do pub.dev